{"ast":null,"code":"import _classCallCheck from \"/Users/kylewiltshire/Documents/projects/2019/Javascript/playground/monten/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kylewiltshire/Documents/projects/2019/Javascript/playground/monten/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kylewiltshire/Documents/projects/2019/Javascript/playground/monten/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kylewiltshire/Documents/projects/2019/Javascript/playground/monten/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kylewiltshire/Documents/projects/2019/Javascript/playground/monten/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kylewiltshire/Documents/projects/2019/Javascript/playground/monten/client/src/components/Transactions/TransactionList.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport TransactionItem from \"./TransactionItem\";\nimport Spinner from \"../Spinner\";\nimport { fetchTransactions } from \"../../actions\";\nimport Pagination from \"../Pagination\"; // DON'T FORGET TO SPECIFY THIS. WHEN CALLING FUNCTIONS\n\nvar TransactionList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TransactionList, _Component);\n\n  function TransactionList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TransactionList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TransactionList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentTransactions: [],\n      currentPage: null,\n      totalPages: null\n    };\n\n    _this.onPageChanged = function (data) {\n      var transactions = _this.props.transactions;\n      var currentPage = data.currentPage,\n          totalPages = data.totalPages,\n          pageLimit = data.pageLimit; //The offset value indicates the starting index for fetching the records for the current page. Using (currentPage - 1) ensures that the offset is zero-based.\n\n      var offset = (currentPage - 1) * pageLimit; // We use the Array.prototype.slice() method to extract the required chunk of records from allCountries by passing the offset as the starting index for the slice\n      // and (offset + pageLimit) as the index before which to end the slice.\n\n      var currentTransactions = transactions.slice(offset, offset + pageLimit);\n\n      _this.setState({\n        currentPage: currentPage,\n        currentTransactions: currentTransactions,\n        totalPages: totalPages\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TransactionList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchTransactions();\n    }\n  }, {\n    key: \"renderTransactions\",\n    value: function renderTransactions() {\n      return this.state.currentTransactions.map(function (_ref) {\n        var date = _ref.date,\n            description = _ref.description,\n            category = _ref.category,\n            amount = _ref.amount,\n            id = _ref.id;\n        return React.createElement(TransactionItem, {\n          date: date,\n          description: description,\n          category: category,\n          amount: amount,\n          key: id,\n          id: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          currentTransactions = _this$state.currentTransactions,\n          currentPage = _this$state.currentPage,\n          totalPages = _this$state.totalPages;\n      var transactions = this.props.transactions;\n      var totalTransactions = this.props.transactions.length;\n\n      if (totalTransactions === 0) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        className: \"text-secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, totalTransactions), \"Transactions\"), React.createElement(\"table\", {\n        className: \"ui celled table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Description\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Category\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Amount\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Actions\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.renderTransactions())), currentPage && React.createElement(\"span\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Page\", React.createElement(\"span\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, currentPage), \" /\", React.createElement(\"span\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, totalPages)), React.createElement(\"div\", {\n        className: \"right aligned\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Pagination, {\n        totalRecords: totalTransactions,\n        pageLimit: 10,\n        pageNeighbours: 1,\n        onPageChanged: this.onPageChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TransactionList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    transactions: Object.values(state.transactions)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchTransactions: fetchTransactions\n})(TransactionList);","map":{"version":3,"sources":["/Users/kylewiltshire/Documents/projects/2019/Javascript/playground/monten/client/src/components/Transactions/TransactionList.js"],"names":["React","Component","connect","TransactionItem","Spinner","fetchTransactions","Pagination","TransactionList","state","currentTransactions","currentPage","totalPages","onPageChanged","data","transactions","props","pageLimit","offset","slice","setState","map","date","description","category","amount","id","totalTransactions","length","marginTop","renderTransactions","mapStateToProps","Object","values"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport TransactionItem from \"./TransactionItem\";\nimport Spinner from \"../Spinner\";\nimport { fetchTransactions } from \"../../actions\";\nimport Pagination from \"../Pagination\";\n\n// DON'T FORGET TO SPECIFY THIS. WHEN CALLING FUNCTIONS\n\nclass TransactionList extends Component {\n  state = {\n    currentTransactions: [],\n    currentPage: null,\n    totalPages: null\n  };\n\n  componentDidMount() {\n    this.props.fetchTransactions();\n  }\n\n  onPageChanged = data => {\n    const { transactions } = this.props;\n    const { currentPage, totalPages, pageLimit } = data;\n\n    //The offset value indicates the starting index for fetching the records for the current page. Using (currentPage - 1) ensures that the offset is zero-based.\n    const offset = (currentPage - 1) * pageLimit;\n    // We use the Array.prototype.slice() method to extract the required chunk of records from allCountries by passing the offset as the starting index for the slice\n    // and (offset + pageLimit) as the index before which to end the slice.\n    const currentTransactions = transactions.slice(offset, offset + pageLimit);\n\n    this.setState({\n      currentPage,\n      currentTransactions,\n      totalPages\n    });\n  };\n\n  renderTransactions() {\n    return this.state.currentTransactions.map(\n      ({ date, description, category, amount, id }) => {\n        return (\n          <TransactionItem\n            date={date}\n            description={description}\n            category={category}\n            amount={amount}\n            key={id}\n            id={id}\n          />\n        );\n      }\n    );\n  }\n\n  render() {\n    const { currentTransactions, currentPage, totalPages } = this.state;\n    const { transactions } = this.props;\n    const totalTransactions = this.props.transactions.length;\n\n    if (totalTransactions === 0) {\n      return <Spinner />;\n    }\n\n    return (\n      <div>\n        <h2 style={{ marginTop: \"10px\" }}>\n          <strong className=\"text-secondary\">{totalTransactions}</strong>\n          Transactions\n        </h2>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Description</th>\n              <th>Category</th>\n              <th>Amount</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>{this.renderTransactions()}</tbody>\n        </table>\n        {currentPage && (\n          <span className=\"\">\n            Page\n            <span className=\"\">{currentPage}</span> /\n            <span className=\"\">{totalPages}</span>\n          </span>\n        )}\n        <div className=\"right aligned\">\n          <Pagination\n            totalRecords={totalTransactions}\n            pageLimit={10}\n            pageNeighbours={1}\n            onPageChanged={this.onPageChanged}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    transactions: Object.values(state.transactions)\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchTransactions }\n)(TransactionList);\n"]},"metadata":{},"sourceType":"module"}